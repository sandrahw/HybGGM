
CondaError: Run 'conda init' before 'conda activate'

/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 63, in forward
    x = self.conv(x)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 26, in forward
    x = self.relu(self.bn2(self.conv2(x)))
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py", line 193, in forward
    return F.batch_norm(
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 2812, in batch_norm
    return torch.batch_norm(
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 254.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 29.31 MiB is free. Including non-PyTorch memory, this process has 10.87 GiB memory in use. Of the allocated memory 10.60 GiB is allocated by PyTorch, and 119.58 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 63, in forward
    x = self.conv(x)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 26, in forward
    x = self.relu(self.bn2(self.conv2(x)))
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py", line 193, in forward
    return F.batch_norm(
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 2812, in batch_norm
    return torch.batch_norm(
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 254.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 29.31 MiB is free. Including non-PyTorch memory, this process has 10.87 GiB memory in use. Of the allocated memory 10.60 GiB is allocated by PyTorch, and 119.58 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 63, in forward
    x = self.conv(x)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 26, in forward
    x = self.relu(self.bn2(self.conv2(x)))
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py", line 193, in forward
    return F.batch_norm(
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 2812, in batch_norm
    return torch.batch_norm(
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 254.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 29.31 MiB is free. Including non-PyTorch memory, this process has 10.87 GiB memory in use. Of the allocated memory 10.60 GiB is allocated by PyTorch, and 119.58 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 1014.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 683.31 MiB is free. Including non-PyTorch memory, this process has 10.23 GiB memory in use. Of the allocated memory 9.94 GiB is allocated by PyTorch, and 141.89 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 1014.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 683.31 MiB is free. Including non-PyTorch memory, this process has 10.23 GiB memory in use. Of the allocated memory 9.94 GiB is allocated by PyTorch, and 141.89 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 1014.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 683.31 MiB is free. Including non-PyTorch memory, this process has 10.23 GiB memory in use. Of the allocated memory 9.94 GiB is allocated by PyTorch, and 141.89 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 1014.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 683.31 MiB is free. Including non-PyTorch memory, this process has 10.23 GiB memory in use. Of the allocated memory 9.94 GiB is allocated by PyTorch, and 141.89 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 101, in forward
    x4, p4 = self.encoder4(p3) # Fourth block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 40, in forward
    x_conv = self.conv(x)  # Apply the convolutional block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 25, in forward
    x = self.relu(self.bn1(self.conv1(x))) # Conv -> BatchNorm -> ReLU
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/activation.py", line 133, in forward
    return F.relu(input, inplace=self.inplace)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 1704, in relu
    result = torch.relu(input)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 122.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 83.31 MiB is free. Including non-PyTorch memory, this process has 10.82 GiB memory in use. Of the allocated memory 10.65 GiB is allocated by PyTorch, and 23.04 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 101, in forward
    x4, p4 = self.encoder4(p3) # Fourth block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 40, in forward
    x_conv = self.conv(x)  # Apply the convolutional block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 25, in forward
    x = self.relu(self.bn1(self.conv1(x))) # Conv -> BatchNorm -> ReLU
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/activation.py", line 133, in forward
    return F.relu(input, inplace=self.inplace)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 1704, in relu
    result = torch.relu(input)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 122.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 83.31 MiB is free. Including non-PyTorch memory, this process has 10.82 GiB memory in use. Of the allocated memory 10.65 GiB is allocated by PyTorch, and 23.04 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 101, in forward
    x4, p4 = self.encoder4(p3) # Fourth block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 40, in forward
    x_conv = self.conv(x)  # Apply the convolutional block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 25, in forward
    x = self.relu(self.bn1(self.conv1(x))) # Conv -> BatchNorm -> ReLU
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/activation.py", line 133, in forward
    return F.relu(input, inplace=self.inplace)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 1704, in relu
    result = torch.relu(input)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 122.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 83.31 MiB is free. Including non-PyTorch memory, this process has 10.82 GiB memory in use. Of the allocated memory 10.65 GiB is allocated by PyTorch, and 23.04 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 101, in forward
    x4, p4 = self.encoder4(p3) # Fourth block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 40, in forward
    x_conv = self.conv(x)  # Apply the convolutional block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 25, in forward
    x = self.relu(self.bn1(self.conv1(x))) # Conv -> BatchNorm -> ReLU
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/activation.py", line 133, in forward
    return F.relu(input, inplace=self.inplace)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 1704, in relu
    result = torch.relu(input)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 122.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 83.31 MiB is free. Including non-PyTorch memory, this process has 10.82 GiB memory in use. Of the allocated memory 10.65 GiB is allocated by PyTorch, and 23.04 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 63, in forward
    x = self.conv(x)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 26, in forward
    x = self.relu(self.bn2(self.conv2(x)))
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py", line 193, in forward
    return F.batch_norm(
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 2812, in batch_norm
    return torch.batch_norm(
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 254.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 29.31 MiB is free. Including non-PyTorch memory, this process has 10.87 GiB memory in use. Of the allocated memory 10.60 GiB is allocated by PyTorch, and 119.58 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 63, in forward
    x = self.conv(x)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 26, in forward
    x = self.relu(self.bn2(self.conv2(x)))
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py", line 193, in forward
    return F.batch_norm(
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 2812, in batch_norm
    return torch.batch_norm(
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 254.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 29.31 MiB is free. Including non-PyTorch memory, this process has 10.87 GiB memory in use. Of the allocated memory 10.60 GiB is allocated by PyTorch, and 119.58 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 63, in forward
    x = self.conv(x)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 26, in forward
    x = self.relu(self.bn2(self.conv2(x)))
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py", line 193, in forward
    return F.batch_norm(
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 2812, in batch_norm
    return torch.batch_norm(
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 254.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 29.31 MiB is free. Including non-PyTorch memory, this process has 10.87 GiB memory in use. Of the allocated memory 10.60 GiB is allocated by PyTorch, and 119.58 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 63, in forward
    x = self.conv(x)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 26, in forward
    x = self.relu(self.bn2(self.conv2(x)))
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py", line 193, in forward
    return F.batch_norm(
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 2812, in batch_norm
    return torch.batch_norm(
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 254.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 29.31 MiB is free. Including non-PyTorch memory, this process has 10.87 GiB memory in use. Of the allocated memory 10.60 GiB is allocated by PyTorch, and 119.58 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 1014.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 683.31 MiB is free. Including non-PyTorch memory, this process has 10.23 GiB memory in use. Of the allocated memory 9.94 GiB is allocated by PyTorch, and 141.89 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 1014.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 683.31 MiB is free. Including non-PyTorch memory, this process has 10.23 GiB memory in use. Of the allocated memory 9.94 GiB is allocated by PyTorch, and 141.89 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 1014.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 683.31 MiB is free. Including non-PyTorch memory, this process has 10.23 GiB memory in use. Of the allocated memory 9.94 GiB is allocated by PyTorch, and 141.89 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 101, in forward
    x4, p4 = self.encoder4(p3) # Fourth block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 40, in forward
    x_conv = self.conv(x)  # Apply the convolutional block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 25, in forward
    x = self.relu(self.bn1(self.conv1(x))) # Conv -> BatchNorm -> ReLU
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/activation.py", line 133, in forward
    return F.relu(input, inplace=self.inplace)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 1704, in relu
    result = torch.relu(input)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 122.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 83.31 MiB is free. Including non-PyTorch memory, this process has 10.82 GiB memory in use. Of the allocated memory 10.65 GiB is allocated by PyTorch, and 23.04 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 101, in forward
    x4, p4 = self.encoder4(p3) # Fourth block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 40, in forward
    x_conv = self.conv(x)  # Apply the convolutional block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 25, in forward
    x = self.relu(self.bn1(self.conv1(x))) # Conv -> BatchNorm -> ReLU
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/activation.py", line 133, in forward
    return F.relu(input, inplace=self.inplace)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 1704, in relu
    result = torch.relu(input)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 122.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 83.31 MiB is free. Including non-PyTorch memory, this process has 10.82 GiB memory in use. Of the allocated memory 10.65 GiB is allocated by PyTorch, and 23.04 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 101, in forward
    x4, p4 = self.encoder4(p3) # Fourth block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 40, in forward
    x_conv = self.conv(x)  # Apply the convolutional block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 25, in forward
    x = self.relu(self.bn1(self.conv1(x))) # Conv -> BatchNorm -> ReLU
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/activation.py", line 133, in forward
    return F.relu(input, inplace=self.inplace)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 1704, in relu
    result = torch.relu(input)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 122.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 83.31 MiB is free. Including non-PyTorch memory, this process has 10.82 GiB memory in use. Of the allocated memory 10.65 GiB is allocated by PyTorch, and 23.04 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 101, in forward
    x4, p4 = self.encoder4(p3) # Fourth block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 40, in forward
    x_conv = self.conv(x)  # Apply the convolutional block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 25, in forward
    x = self.relu(self.bn1(self.conv1(x))) # Conv -> BatchNorm -> ReLU
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/activation.py", line 133, in forward
    return F.relu(input, inplace=self.inplace)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 1704, in relu
    result = torch.relu(input)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 122.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 83.31 MiB is free. Including non-PyTorch memory, this process has 10.82 GiB memory in use. Of the allocated memory 10.65 GiB is allocated by PyTorch, and 23.04 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:433: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 63, in forward
    x = self.conv(x)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 26, in forward
    x = self.relu(self.bn2(self.conv2(x)))
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py", line 193, in forward
    return F.batch_norm(
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 2812, in batch_norm
    return torch.batch_norm(
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 254.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 29.31 MiB is free. Including non-PyTorch memory, this process has 10.87 GiB memory in use. Of the allocated memory 10.60 GiB is allocated by PyTorch, and 119.58 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 63, in forward
    x = self.conv(x)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 26, in forward
    x = self.relu(self.bn2(self.conv2(x)))
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py", line 193, in forward
    return F.batch_norm(
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 2812, in batch_norm
    return torch.batch_norm(
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 254.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 29.31 MiB is free. Including non-PyTorch memory, this process has 10.87 GiB memory in use. Of the allocated memory 10.60 GiB is allocated by PyTorch, and 119.58 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 63, in forward
    x = self.conv(x)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 26, in forward
    x = self.relu(self.bn2(self.conv2(x)))
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py", line 193, in forward
    return F.batch_norm(
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 2812, in batch_norm
    return torch.batch_norm(
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 254.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 29.31 MiB is free. Including non-PyTorch memory, this process has 10.87 GiB memory in use. Of the allocated memory 10.60 GiB is allocated by PyTorch, and 119.58 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 63, in forward
    x = self.conv(x)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 26, in forward
    x = self.relu(self.bn2(self.conv2(x)))
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/batchnorm.py", line 193, in forward
    return F.batch_norm(
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 2812, in batch_norm
    return torch.batch_norm(
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 254.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 29.31 MiB is free. Including non-PyTorch memory, this process has 10.87 GiB memory in use. Of the allocated memory 10.60 GiB is allocated by PyTorch, and 119.58 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 1014.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 683.31 MiB is free. Including non-PyTorch memory, this process has 10.23 GiB memory in use. Of the allocated memory 9.94 GiB is allocated by PyTorch, and 141.89 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 1014.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 683.31 MiB is free. Including non-PyTorch memory, this process has 10.23 GiB memory in use. Of the allocated memory 9.94 GiB is allocated by PyTorch, and 141.89 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 1014.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 683.31 MiB is free. Including non-PyTorch memory, this process has 10.23 GiB memory in use. Of the allocated memory 9.94 GiB is allocated by PyTorch, and 141.89 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 114, in forward
    d6 = self.decoder6(d5, x1)          # Continue with decoder and corresponding skip connection from encoder
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 1014.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 683.31 MiB is free. Including non-PyTorch memory, this process has 10.23 GiB memory in use. Of the allocated memory 9.94 GiB is allocated by PyTorch, and 141.89 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 101, in forward
    x4, p4 = self.encoder4(p3) # Fourth block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 40, in forward
    x_conv = self.conv(x)  # Apply the convolutional block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 25, in forward
    x = self.relu(self.bn1(self.conv1(x))) # Conv -> BatchNorm -> ReLU
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/activation.py", line 133, in forward
    return F.relu(input, inplace=self.inplace)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 1704, in relu
    result = torch.relu(input)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 122.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 83.31 MiB is free. Including non-PyTorch memory, this process has 10.82 GiB memory in use. Of the allocated memory 10.65 GiB is allocated by PyTorch, and 23.04 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 101, in forward
    x4, p4 = self.encoder4(p3) # Fourth block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 40, in forward
    x_conv = self.conv(x)  # Apply the convolutional block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 25, in forward
    x = self.relu(self.bn1(self.conv1(x))) # Conv -> BatchNorm -> ReLU
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/activation.py", line 133, in forward
    return F.relu(input, inplace=self.inplace)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 1704, in relu
    result = torch.relu(input)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 122.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 83.31 MiB is free. Including non-PyTorch memory, this process has 10.82 GiB memory in use. Of the allocated memory 10.65 GiB is allocated by PyTorch, and 23.04 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 101, in forward
    x4, p4 = self.encoder4(p3) # Fourth block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 40, in forward
    x_conv = self.conv(x)  # Apply the convolutional block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 25, in forward
    x = self.relu(self.bn1(self.conv1(x))) # Conv -> BatchNorm -> ReLU
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/activation.py", line 133, in forward
    return F.relu(input, inplace=self.inplace)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 1704, in relu
    result = torch.relu(input)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 122.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 83.31 MiB is free. Including non-PyTorch memory, this process has 10.82 GiB memory in use. Of the allocated memory 10.65 GiB is allocated by PyTorch, and 23.04 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 390, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 101, in forward
    x4, p4 = self.encoder4(p3) # Fourth block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 40, in forward
    x_conv = self.conv(x)  # Apply the convolutional block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 25, in forward
    x = self.relu(self.bn1(self.conv1(x))) # Conv -> BatchNorm -> ReLU
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/activation.py", line 133, in forward
    return F.relu(input, inplace=self.inplace)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 1704, in relu
    result = torch.relu(input)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 122.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 83.31 MiB is free. Including non-PyTorch memory, this process has 10.82 GiB memory in use. Of the allocated memory 10.65 GiB is allocated by PyTorch, and 23.04 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
