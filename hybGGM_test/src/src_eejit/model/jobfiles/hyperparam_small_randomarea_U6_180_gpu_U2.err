
CondaError: Run 'conda init' before 'conda activate'

Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 397, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 198, in forward
    d1 = self.decoder1(bottleneck, x2)          # Continue with decoder and corresponding skip connection from encoder2
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 63, in forward
    x = self.conv(x)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 25, in forward
    x = self.relu(self.bn1(self.conv1(x))) # Conv -> BatchNorm -> ReLU
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/activation.py", line 133, in forward
    return F.relu(input, inplace=self.inplace)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/functional.py", line 1704, in relu
    result = torch.relu(input)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 508.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 363.31 MiB is free. Including non-PyTorch memory, this process has 10.55 GiB memory in use. Of the allocated memory 10.36 GiB is allocated by PyTorch, and 33.25 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 84, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 397, in RS_hyperparam_tuning_training
    train.RS_train_test_model(model, train_loader, test_loader, lr_rate, def_epochs, log_dir, patience, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 154, in RS_train_test_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 192, in forward
    x2, p2 = self.encoder2(p1) # Second block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 40, in forward
    x_conv = self.conv(x)  # Apply the convolutional block
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 25, in forward
    x = self.relu(self.bn1(self.conv1(x))) # Conv -> BatchNorm -> ReLU
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/conv.py", line 554, in forward
    return self._conv_forward(input, self.weight, self.bias)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/conv.py", line 549, in _conv_forward
    return F.conv2d(
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 1014.00 MiB. GPU 0 has a total capacity of 10.90 GiB of which 643.31 MiB is free. Including non-PyTorch memory, this process has 10.27 GiB memory in use. Of the allocated memory 10.09 GiB is allocated by PyTorch, and 34.07 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
