
CondaError: Run 'conda init' before 'conda activate'

/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:428: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:428: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:428: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:428: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 87, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device, batch_size, sub_batch_size)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 398, in RS_hyperparam_tuning_training
    train.RS_val_model(model, val_loader, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 329, in RS_val_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 199, in forward
    d2 = self.decoder2(d1, x1)          # Continue with decoder and corresponding skip connection from encoder1
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 3.96 GiB. GPU 0 has a total capacity of 10.90 GiB of which 2.79 GiB is free. Including non-PyTorch memory, this process has 8.11 GiB memory in use. Of the allocated memory 7.86 GiB is allocated by PyTorch, and 92.19 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 87, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device, batch_size, sub_batch_size)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 398, in RS_hyperparam_tuning_training
    train.RS_val_model(model, val_loader, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 329, in RS_val_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 199, in forward
    d2 = self.decoder2(d1, x1)          # Continue with decoder and corresponding skip connection from encoder1
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 3.96 GiB. GPU 0 has a total capacity of 10.90 GiB of which 2.79 GiB is free. Including non-PyTorch memory, this process has 8.11 GiB memory in use. Of the allocated memory 7.86 GiB is allocated by PyTorch, and 92.19 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 87, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device, batch_size, sub_batch_size)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 398, in RS_hyperparam_tuning_training
    train.RS_val_model(model, val_loader, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 329, in RS_val_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 199, in forward
    d2 = self.decoder2(d1, x1)          # Continue with decoder and corresponding skip connection from encoder1
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 3.96 GiB. GPU 0 has a total capacity of 10.90 GiB of which 2.79 GiB is free. Including non-PyTorch memory, this process has 8.11 GiB memory in use. Of the allocated memory 7.86 GiB is allocated by PyTorch, and 92.19 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 87, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device, batch_size, sub_batch_size)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 398, in RS_hyperparam_tuning_training
    train.RS_val_model(model, val_loader, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 329, in RS_val_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 199, in forward
    d2 = self.decoder2(d1, x1)          # Continue with decoder and corresponding skip connection from encoder1
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 3.96 GiB. GPU 0 has a total capacity of 10.90 GiB of which 2.79 GiB is free. Including non-PyTorch memory, this process has 8.11 GiB memory in use. Of the allocated memory 7.86 GiB is allocated by PyTorch, and 92.19 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:428: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:428: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:428: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:428: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 87, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device, batch_size, sub_batch_size)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 398, in RS_hyperparam_tuning_training
    train.RS_val_model(model, val_loader, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 329, in RS_val_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 199, in forward
    d2 = self.decoder2(d1, x1)          # Continue with decoder and corresponding skip connection from encoder1
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 3.96 GiB. GPU 0 has a total capacity of 10.90 GiB of which 2.79 GiB is free. Including non-PyTorch memory, this process has 8.11 GiB memory in use. Of the allocated memory 7.86 GiB is allocated by PyTorch, and 92.19 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 87, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device, batch_size, sub_batch_size)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 398, in RS_hyperparam_tuning_training
    train.RS_val_model(model, val_loader, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 329, in RS_val_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 199, in forward
    d2 = self.decoder2(d1, x1)          # Continue with decoder and corresponding skip connection from encoder1
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 3.96 GiB. GPU 0 has a total capacity of 10.90 GiB of which 2.79 GiB is free. Including non-PyTorch memory, this process has 8.11 GiB memory in use. Of the allocated memory 7.86 GiB is allocated by PyTorch, and 92.19 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 87, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device, batch_size, sub_batch_size)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 398, in RS_hyperparam_tuning_training
    train.RS_val_model(model, val_loader, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 329, in RS_val_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 199, in forward
    d2 = self.decoder2(d1, x1)          # Continue with decoder and corresponding skip connection from encoder1
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 3.96 GiB. GPU 0 has a total capacity of 10.90 GiB of which 2.79 GiB is free. Including non-PyTorch memory, this process has 8.11 GiB memory in use. Of the allocated memory 7.86 GiB is allocated by PyTorch, and 92.19 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 87, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device, batch_size, sub_batch_size)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 398, in RS_hyperparam_tuning_training
    train.RS_val_model(model, val_loader, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 329, in RS_val_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 199, in forward
    d2 = self.decoder2(d1, x1)          # Continue with decoder and corresponding skip connection from encoder1
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 3.96 GiB. GPU 0 has a total capacity of 10.90 GiB of which 2.79 GiB is free. Including non-PyTorch memory, this process has 8.11 GiB memory in use. Of the allocated memory 7.86 GiB is allocated by PyTorch, and 92.19 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:428: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:428: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:428: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py:428: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model_reload.load_state_dict(torch.load(os.path.join(log_dir, 'best_model.pth')))
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 87, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device, batch_size, sub_batch_size)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 398, in RS_hyperparam_tuning_training
    train.RS_val_model(model, val_loader, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 329, in RS_val_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 199, in forward
    d2 = self.decoder2(d1, x1)          # Continue with decoder and corresponding skip connection from encoder1
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 3.96 GiB. GPU 0 has a total capacity of 10.90 GiB of which 2.79 GiB is free. Including non-PyTorch memory, this process has 8.11 GiB memory in use. Of the allocated memory 7.86 GiB is allocated by PyTorch, and 92.19 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 87, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device, batch_size, sub_batch_size)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 398, in RS_hyperparam_tuning_training
    train.RS_val_model(model, val_loader, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 329, in RS_val_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 199, in forward
    d2 = self.decoder2(d1, x1)          # Continue with decoder and corresponding skip connection from encoder1
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 3.96 GiB. GPU 0 has a total capacity of 10.90 GiB of which 2.79 GiB is free. Including non-PyTorch memory, this process has 8.11 GiB memory in use. Of the allocated memory 7.86 GiB is allocated by PyTorch, and 92.19 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 87, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device, batch_size, sub_batch_size)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 398, in RS_hyperparam_tuning_training
    train.RS_val_model(model, val_loader, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 329, in RS_val_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 199, in forward
    d2 = self.decoder2(d1, x1)          # Continue with decoder and corresponding skip connection from encoder1
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 3.96 GiB. GPU 0 has a total capacity of 10.90 GiB of which 2.79 GiB is free. Including non-PyTorch memory, this process has 8.11 GiB memory in use. Of the allocated memory 7.86 GiB is allocated by PyTorch, and 92.19 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/run_hyperparam_testing_random_areas.py", line 87, in <module>
    models.RS_hyperparam_tuning_training(train_loader, test_loader, validation_loader, model_type, learning_rate, epochs, log_directory, patience, device, batch_size, sub_batch_size)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 398, in RS_hyperparam_tuning_training
    train.RS_val_model(model, val_loader, device, writer=writer)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/train.py", line 329, in RS_val_model
    outputs = model(inputs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 199, in forward
    d2 = self.decoder2(d1, x1)          # Continue with decoder and corresponding skip connection from encoder1
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/eejit/home/hausw001/.conda/envs/env_hybGGM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/eejit/home/hausw001/HybGGM/hybGGM_test/src/model/models.py", line 62, in forward
    x = torch.cat([skip, x], dim=1)  # Concatenate along channel axis
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 3.96 GiB. GPU 0 has a total capacity of 10.90 GiB of which 2.79 GiB is free. Including non-PyTorch memory, this process has 8.11 GiB memory in use. Of the allocated memory 7.86 GiB is allocated by PyTorch, and 92.19 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
